function cd {
    # Initiate MOJIR_DIR_STACK to current directory if not defined
    if [[ -z $MOJIR_DIR_STACK ]]; then
        MOJIR_DIR_STACK=("$PWD")
    fi

    # Initialte MOJIR_DIR_STACK_POS to 0 if not defined
    MOJIR_DIR_STACK_POS=${MOJIR_DIR_STACK_POS:-1}

    # avoid recursion by using builtin
    builtin cd "$@"
    local new_dir="${PWD}"

    # Ignore moving to same direcotry
    if [[ ${MOJIR_DIR_STACK[$MOJIR_DIR_STACK_POS]} == $new_dir ]]; then
        return
    fi

    # truncate stack if MOJIR_DIR_STACK_POS somewhere in the middle.
    # You can jump back and forth in stack with cd- and cd+ bu
    # as soon as you cd to a new directory, the forward history
    # is lost.
    MOJIR_DIR_STACK=(${MOJIR_DIR_STACK:0:$((MOJIR_DIR_STACK_POS + 1))})

    # Push current dir to stack
    MOJIR_DIR_STACK+=($new_dir)

    # Restrict the size to 200 elements
    if [[ ${#MOJIR_DIR_STACK} -gt 200 ]]; then
        shift MOJIR_DIR_STACK
    fi

    # set position to the last element
    ((MOJIR_DIR_STACK_POS = ${#MOJIR_DIR_STACK}))
}

# move backward in history
function cd- {
    # Initialte MOJIR_DIR_STACK_POS to 0 if not defined
    MOJIR_DIR_STACK_POS=${MOJIR_DIR_STACK_POS:-1}

    ((MOJIR_DIR_STACK_POS -= 1))

    # Guard, don't cross element boundaries
    if [ $MOJIR_DIR_STACK_POS -lt 1 ]; then
        MOJIR_DIR_STACK_POS=1
        return
    fi

    # avoid recursion by using builtin
    local path=${MOJIR_DIR_STACK[$MOJIR_DIR_STACK_POS]}
    builtin cd "$path"
}

# move forward in history
function cd+ {
    # Initialte MOJIR_DIR_STACK_POS to 0 if not defined
    MOJIR_DIR_STACK_POS=${MOJIR_DIR_STACK_POS:-1}

    ((MOJIR_DIR_STACK_POS += 1))

    # Guard, don't cross element boundaries
    if [ $MOJIR_DIR_STACK_POS -gt ${#MOJIR_DIR_STACK} ]; then
        MOJIR_DIR_STACK_POS=${#MOJIR_DIR_STACK}
        return
    fi

    # avoid recursion by using builtin
    local path=${MOJIR_DIR_STACK[$MOJIR_DIR_STACK_POS]}
    builtin cd "$path"
}

function cd/ {

    # number of elements in history
    local size=${#MOJIR_DIR_STACK}
    if [ $size -eq 0 ]; then return; fi

    local input
    # column width for sequence number
    local width=2
    if [ $size -ge 10 ]; then ((width += 1)); fi
    if [ $size -ge 100 ]; then ((width += 1)); fi

    local i
    local path
    local marker
    local line_number

    for ((i = 1; i <= $size; i++)); do
        line_number=$((size - i + 1))
        # substitute home folder to ~
        path="${MOJIR_DIR_STACK[$i]//$HOME/~}"
        if [[ $MOJIR_DIR_STACK_POS -eq $i ]]; then
            marker="* "
        else
            marker="  "
        fi
        printf "%-${width}d%s%s\n" "$line_number" "$marker" "$path"
        empty=0
    done

    echo -n "Directory number: "
    read input

    # Empty input cancels
    if [[ -z $input ]]; then return; fi

    # match digits
    if [[ $input = *[![:digit:]]* ]]; then
        echo "Invalid number"
        return
    fi
    if [ $input -lt 1 ]; then
        echo "Invalid number"
        return
    fi
    if [ $input -gt $size ]; then
        echo "Invalid number"
        return
    fi

    MOJIR_DIR_STACK_POS=$((${#MOJIR_DIR_STACK[@]} - input + 1))

    # avoid recursion by using builtin
    path=${MOJIR_DIR_STACK[$MOJIR_DIR_STACK_POS]}
    builtin cd "$path"
}

# Go to specific directory in favorites.
function cd: {
    local dir=~/.config/cd
    local file=$dir/cd.conf

    # Create directory and file if not existing
    cd_create_configfile

    # save favorite file in array
    local favs=()
    while IFS= read -r line; do
        if [[ -n $line ]]; then
            favs+=("$line")
        fi
    done <$file

    local count=${#favs}

    if [[ $count -eq 0 ]]; then
        return
    fi

    # column width for sequense number
    local width=1
    if [[ $count -ge 10 ]]; then ((width += 1)); fi
    if [[ $count -ge 100 ]]; then ((width += 1)); fi

    local i=1
    local fav
    for fav in ${favs[@]}; do
        # substitute home folder to ~
        fav=${fav/#$HOME/~}
        printf "%-${width}d %s\n" "$i" "$fav"
        ((i += 1))
    done

    echo -n "Directory number: "
    local input
    read input

    # Empty input cancels
    if [ -z $input ]; then return; fi

    # match digits
    if [[ $input = *[![:digit:]]* ]]; then
        echo "Invalid number"
        return
    fi
    if [ $input -lt 1 ]; then
        echo "Invalid number"
        return
    fi
    if [ $input -gt $count ]; then
        echo "Invalid number"
        return
    fi

    local path=${favs[$input]}

    cd "$path"
}

# Add current directory ($PWD) to favorites
function cd++ {
    local dir=~/.config/cd
    local file=$dir/cd.conf

    # Create directory and file if not existing
    cd_create_configfile

    # path to save
    local path="$PWD"

    local favs=()
    while IFS= read -r line; do
        if [[ -n $line ]]; then
            favs+=("$line")
        fi
    done <$file

    local fav
    for fav in ${favs[@]}; do
        # Avoid duplicates
        if [[ "$fav" = "$path" ]]; then return; fi
    done

    # Append to file
    echo $path >>$file
}

# Remove either current directory.
function cd-- {
    local dir=~/.config/cd
    local file=$dir/cd.conf

    # Create directory and file if not existing
    cd_create_configfile

    # save favorite file in array
    local favs=()
    while IFS= read -r line; do
        if [[ -n $line ]]; then
            favs+=("$line")
        fi
    done <$file

    # Remove and create new empty favorite file
    rm $file
    touch $file


    local path="$PWD"
    local fav
    for fav in $favs; do
        if [[ "$fav" != "$path" ]]; then echo $fav >> $file; fi
    done
}


function cd_create_configfile {
    local dir=~/.config/cd
    local file=$dir/cd.conf
    if [[ ! -d $dir ]]; then
        echo creating directory $dir
        mkdir $dir
    fi
    if [[ ! -f $file ]]; then
        echo creating file $file
        touch $file
    fi
}
